name: Publish Docker image

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify and create Docker Hub repository if needed
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          REPO_NAME="latixa12/teste"
          REPO_USER=$(echo $REPO_NAME | cut -d/ -f1)
          REPO_IMAGE=$(echo $REPO_NAME | cut -d/ -f2)
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'$DOCKER_USERNAME'", "password": "'$DOCKER_PASSWORD'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          REPO_EXISTS=$(curl -s -H "Authorization: JWT $TOKEN" https://hub.docker.com/v2/repositories/$REPO_USER/$REPO_IMAGE/ | jq -r .name)
          if [ "$REPO_EXISTS" == "null" ]; then
            curl -s -H "Authorization: JWT $TOKEN" -H "Content-Type: application/json" -X POST -d '{"name": "'$REPO_IMAGE'", "is_private": false}' https://hub.docker.com/v2/repositories/$REPO_USER/
            echo "Repository $REPO_NAME created."
          else
            echo "Repository $REPO_NAME already exists."
          fi

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get latest tag
        id: get_latest_tag
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -d '{"username": "'"$DOCKER_USERNAME"'", "password": "'"$DOCKER_PASSWORD"'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          LATEST_TAG=$(curl -s -H "Authorization: JWT $TOKEN" https://hub.docker.com/v2/repositories/$REPO_USER/$REPO_IMAGE/tags/?page_size=1 | jq -r '.results[0].name')
          echo "Latest tag: $LATEST_TAG"
          if [[ "$LATEST_TAG" == "null" ]]; then
            NEXT_TAG="1.0"
          else
            VERSION=$(echo $LATEST_TAG | awk -F. '{print $1+1".0"}')
            NEXT_TAG=$VERSION
          fi
          echo "Next tag: $NEXT_TAG"
          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: latixa12/teste
          tags: ${{ env.NEXT_TAG }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.NEXT_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: latixa12/teste
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
